<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp2"
        xmlns:myenum="clr-namespace:WpfApp2.Model"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:scm="clr-namespace:System.ComponentModel;assembly=WindowsBase"
        xmlns:w="clr-namespace:WpfApp2.ViewModel"
        x:Class="WpfApp2.MainWindow"

        mc:Ignorable="d" WindowStartupLocation="CenterScreen"
        Title="FUNCTION GENERATOR"  Height="550" Width="1000" FontFamily="Verdana" 
        Background="#FFEEFAFF" Icon="icons8-gears-80.ico">

    <Window.Resources>

        <Style TargetType="{x:Type TextBox}">
            <Style.Resources>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="2" />
                </Style>
            </Style.Resources>
        </Style>

        <Style x:Key="myButtonStyle" TargetType="{x:Type Button}">
            <Style.Resources>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="2"/>
                </Style>
            </Style.Resources>
            <Style.Triggers>
                <Trigger Property="IsPressed" Value="False">
                    <Setter Property="Effect">
                        <Setter.Value>
                            <DropShadowEffect BlurRadius="3" ShadowDepth="3" Color="LightGray"/>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <CollectionViewSource Source="{Binding mMultipleShotList, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
          x:Key="myCollectionView">
            <!--<CollectionViewSource.SortDescriptions>
                <scm:SortDescription PropertyName="mWave" Direction="Descending" />
            </CollectionViewSource.SortDescriptions>-->
        </CollectionViewSource>

        <CollectionViewSource Source="{Binding mMyTargetOnDB, UpdateSourceTrigger=PropertyChanged}"
         x:Key="myCollectionDBView"/>

        <ObjectDataProvider x:Key="dataFromEnum" MethodName="GetValues"
                        ObjectType="{x:Type sys:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="myenum:WaveForm"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <w:NullImageConverter x:Key="nullImageConverter"/>
        <w:BoolToVisibleConvert x:Key="MyBoolToVis"/>
        <BooleanToVisibilityConverter x:Key="BoolToVis" />

    </Window.Resources>

    <Grid>
        <TabControl x:Name="myTabControl" Padding="0" SelectedIndex="0">
            <TabControl.Resources>
                <Style TargetType="{x:Type Grid}">
                    <Setter Property="Background" Value="#FFEEFAFF"/>
                </Style>
            </TabControl.Resources>

            <TabItem  Header="Single Shot" Height="20" Width="150">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="15"/>
                        <ColumnDefinition Width="160"/>
                        <ColumnDefinition Width="20"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="20"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="20"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="20"/>
                    </Grid.RowDefinitions>

                    <WpfPlot x:Name="myWpfPlot" Grid.Column="1" Grid.ColumnSpan="3" Grid.Row="1" Grid.RowSpan="1"/>

                    <StackPanel Grid.Column="4" Grid.Row="1" Orientation="Vertical"  Grid.RowSpan="1" MinWidth="150" Margin="0">
                        <StackPanel.Resources>
                            <w:ComparisonConverter x:Key="ComparisonConverter" />
                        </StackPanel.Resources>
                        <Label FontWeight="Bold" Content="Signal-Wave Form" Margin="5,5,5,5"/>
                        <RadioButton x:Name="rdoSine" GroupName="waveForm" Content="Sine" Margin="10,5,5,5" IsChecked="{Binding mWave, ConverterParameter={x:Static myenum:WaveForm.Sine}, Converter={StaticResource ComparisonConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <RadioButton x:Name="rdoSawt" GroupName="waveForm" Content="Sawtooth" Margin="10,5,5,5" IsChecked="{Binding mWave, ConverterParameter={x:Static myenum:WaveForm.Sawtooth}, Converter={StaticResource ComparisonConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <RadioButton x:Name="rdoTria" GroupName="waveForm" Content="Triangle" Margin="10,5,5,5" IsChecked="{Binding mWave, ConverterParameter={x:Static myenum:WaveForm.Triangle}, Converter={StaticResource ComparisonConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <RadioButton x:Name="rdoSquare" GroupName="waveForm" Content="Square" Margin="10,5,5,5" IsChecked="{Binding mWave, ConverterParameter={x:Static myenum:WaveForm.Square}, Converter={StaticResource ComparisonConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <RadioButton x:Name="rdoRand" GroupName="waveForm" Content="Random" Margin="10,5,5,5" IsChecked="{Binding mWave, ConverterParameter={x:Static myenum:WaveForm.Random}, Converter={StaticResource ComparisonConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <RadioButton x:Name="rdoRandDigi" GroupName="waveForm" Content="Random Digital" Margin="10,5,5,5" IsChecked="{Binding mWave, ConverterParameter={x:Static myenum:WaveForm.RandomDigital}, Converter={StaticResource ComparisonConverter}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                        <TextBlock Text="Target On Database" FontWeight="Bold" Margin="10,5,5,5"/>
                        <ComboBox x:Name="cbbTargetOnDB" x:FieldModifier="public" ToolTip="Choose one target to insert to multipleshot" ItemsSource="{Binding mMyTargetOnDB, UpdateSourceTrigger=PropertyChanged}" Margin = "10,0,5,0" MinWidth="120"
                                  SelectedItem ="{Binding mSelectedTargetOnDB, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                    </StackPanel>

                    <Label x:Name ="lblError" x:FieldModifier="public"  Grid.Column="2" Grid.Row="2" Grid.RowSpan="2" VerticalAlignment="Top" Foreground="Red" FontStyle="Italic" Margin="0,0,0,0"  HorizontalAlignment="Center">
                        <AccessText TextWrapping="Wrap" Text="{Binding mErrorMessage, UpdateSourceTrigger=PropertyChanged}"/>
                    </Label>

                    <StackPanel Orientation="Vertical" Grid.Column ="4" Grid.Row="3" VerticalAlignment="Center" Margin="5,9,0,10" >

                        <Button x:Name="btnInsertProfile" ToolTip="Insert the working profile to multiple shot" Content="Insert this Profile" Background="#fae0df" 
                                Margin="5" FontWeight="DemiBold" Height="22" BorderThickness="0.5" Style="{StaticResource myButtonStyle}"
                                 Click="btnInsertProfile_Click"/>

                        <Button x:Name="btnReset" Content="Reset" ToolTip="Reset to the default setting" Click="btnReset_Click" Margin="5" BorderThickness="0.5" 
                                 Height="21" Style="{StaticResource myButtonStyle}"/>

                        <Button x:Name="btnSaveToJson" ToolTip="Save this profile to json-file" Content="Save to File" Click="btnSimulateToJson_Click"  BorderThickness="0.5" 
                                Margin="5" FontWeight="DemiBold" Height="22" Style="{StaticResource myButtonStyle}" >
                            <!--<Button.Resources>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="CornerRadius" Value="2"/>
                                </Style>
                            </Button.Resources>-->
                        </Button>
                    </StackPanel>
                    <DockPanel VerticalAlignment="Center" Grid.Column="4" Grid.Row="4" Margin="5,24,0,25">
                        <Button x:Name="btnSimulate" ToolTip="Save the profile to the database" Click="btnSimulate_Click" Content="Send to DB" Margin="5" 
                                FontWeight="SemiBold" Height="22" Style="{StaticResource myButtonStyle}" BorderThickness="0.5" 
                                Background="#b2fcff">
                        </Button>
                    </DockPanel>

                    <StackPanel Grid.Column="1" Grid.Row="3" Orientation="Vertical">
                        <Label Content="Frequency (Hz)"  FontWeight="Bold"/>
                        <StackPanel Orientation="Horizontal">
                            <TextBox x:Name="txtFreq" ToolTip="Insert value of frequency in hertz" Width ="120" Margin="0,0" Height="19" VerticalAlignment="Center" PreviewTextInput="DoubleValidation"
                                Text="{Binding mFreq, Delay=1000, Mode=TwoWay, NotifyOnValidationError=False, StringFormat=N3, UpdateSourceTrigger=PropertyChanged, ValidatesOnNotifyDataErrors=False, ValidatesOnDataErrors=True}"/>

                            <StackPanel Orientation="Vertical">
                                <Button x:Name="btnFreqPlus" ToolTip="Increase value of frequency by offset value" Click="btnFreqPlus_Click" Content="▲" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"/>
                                <Button x:Name="btnFreqMinus" ToolTip="Decrease value of frequency by offset value" Click="btnFreqMinus_Click" Content="▼" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"/>
                            </StackPanel>
                        </StackPanel>
                        <TextBlock Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=txtFreq, FallbackValue=''}" Foreground="Red" FontSize="9" VerticalAlignment="Bottom"/>

                    </StackPanel>

                    <StackPanel Grid.Column="2" Grid.ColumnSpan="2" Grid.Row="3" Margin="10,0,0,0" Orientation="Vertical" HorizontalAlignment="Stretch">
                        <DockPanel HorizontalAlignment="Stretch" Margin="0,10,0,0">
                            <Label Content="Offset (Hz)" VerticalAlignment="Bottom" Margin="0,0,0,0"/>
                            <CheckBox x:Name="chkFreqMaxOffset" ToolTip="synchronize with the fequency value" Content="syn. with Freq."  HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="0,0,5,5" IsChecked="{Binding Path=mChkBoxSynFreq}" />
                        </DockPanel>
                        <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                            <Slider x:Name="sldFreq" ToolTip="adjust interval for changing value of frequency" Maximum="{Binding Path=mMaxOffsetFreq}" Minimum="0" TickFrequency="{Binding Path= mTickFrequencyOnSlider}"
                    TickPlacement="BottomRight" ValueChanged="sldFreq_ValueChanged" Value="0"
                    MinWidth="300" AutoToolTipPlacement="TopLeft" Foreground="Blue" AutoToolTipPrecision="3" />
                            <DockPanel>
                                <Label DockPanel.Dock="Left" Content="0 Hz" FontSize="10" HorizontalAlignment="Left"/>
                                <TextBlock DockPanel.Dock="Right" Text="{Binding mMaxOffsetFreq, StringFormat={}{0:N3} Hz}" FontSize="10" HorizontalAlignment="Right" Margin="0,0,0,0"/>
                            </DockPanel>
                        </StackPanel>
                    </StackPanel>

                    <StackPanel Grid.Column="1" Grid.Row="4" Orientation="Vertical">
                        <Label Content="Amplitude (V)" FontWeight="Bold" VerticalAlignment="Center"/>
                        <StackPanel Orientation="Horizontal">
                            <TextBox x:Name="txtAmp" ToolTip="Insert value of amplitude in volt" Width ="120" Margin="0,0" Height="19" VerticalAlignment="Center" PreviewTextInput="DoubleValidation" 
                                Text="{Binding mAmpl, Delay=500, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
                            <StackPanel Orientation="Vertical" >
                                <Button x:Name="btnAmplPlus" ToolTip="Increase amplitude value by offset value" Click="btnAmplPlus_Click" Content="▲" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"/>
                                <Button x:Name="btnAmplMinus" ToolTip="Decrease amplitude value by offset value" Click="btnAmplMinus_Click" Content="▼" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}"/>
                            </StackPanel>
                        </StackPanel>
                        <TextBlock Text="{Binding (Validation.Errors)[0].ErrorContent, ElementName=txtAmp, FallbackValue=''}" Foreground="Red" FontSize="9" VerticalAlignment="Bottom"/>
                    </StackPanel>

                    <StackPanel Orientation="Vertical" Grid.Column="2" Grid.ColumnSpan="2" Grid.Row="4" Margin="10,0,0,0">
                        <DockPanel>
                            <Label Content="Offset (V)" VerticalAlignment="Bottom" Margin="0,10,0,0" HorizontalAlignment="Left"/>
                            <TextBox Text ="{Binding mOffsetAmpl,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged, Delay=1000}" Margin="0,0,5,0"
                                     HorizontalAlignment="Right" Width="110" Height="20" ToolTip="Input offset for Amplitude" />
                        </DockPanel>
                        <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                            <Slider x:Name="sldAmp" ToolTip="adjust interval for changing value of amplitude" Minimum="0" Maximum="1000" TickFrequency="100"
                                    TickPlacement="BottomRight" ValueChanged="sldAmp_ValueChanged" Value="0"
                                    MinWidth="300" Foreground="Blue"/>
                            <DockPanel >
                                <Label DockPanel.Dock="Left" Content="0 V" FontSize="10" HorizontalAlignment="Left" />
                                <Label DockPanel.Dock="Right" Content="1 V" FontSize="10" HorizontalAlignment="Right" />
                            </DockPanel>
                        </StackPanel>
                    </StackPanel>
                </Grid>
            </TabItem>

            <TabItem Header="Multiple Shot" Height="20" Width="150">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="35"/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="20"/>
                        <ColumnDefinition Width="160"/>
                        <ColumnDefinition Width="25"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="20"/>
                        <RowDefinition Height="auto"/>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="40"/>
                    </Grid.RowDefinitions>


                    <Label x:Name="lblwelcome" x:FieldModifier="public" Content="SIMULATION PROFILE MANAGEMENT" Grid.Column="1" Grid.Row="1" FontSize="13" FontWeight="DemiBold" Foreground="Blue"/>
                    <Label x:Name ="lblErrorOnMTab" Grid.Column="2" Grid.Row="1" Foreground="Red" FontStyle="Italic" Margin="0,0,0,0"  HorizontalAlignment="Center">
                        <AccessText TextWrapping="Wrap" Text="{Binding mErrorMessage, UpdateSourceTrigger=PropertyChanged}"/>
                    </Label>
                    <StackPanel Orientation="Vertical" Grid.Column ="4" Grid.Row="2" VerticalAlignment="Bottom" Height="99" >

                        <Button x:Name="btnViewDatabase" ToolTip="View the current profiles on database" Content="View Database"  Margin="0,0,0,10" Click="btnViewDatabase_Click" Background="#fae0df"
                                BorderThickness="0.5" Height="22" FontWeight="Bold" VerticalAlignment="Top" Style="{StaticResource myButtonStyle}" />

                        <Button x:Name="btnMSimuToJson" ToolTip="Save profiles to json file" Content="Save Profiles" Click="btnSaveProfilesToJson_Click" Margin="0,0,0,10" 
                                BorderThickness="0.5" Height="22" FontWeight="Bold" Style="{StaticResource myButtonStyle}"/>

                        <Button x:Name="btnMSimuToDB" ToolTip="Save all profiles to database" Content="Send all to DB"  Margin="0,0,0,10" FontWeight="Bold" Height="22" Style="{StaticResource myButtonStyle}" 
                                Click="btnMSimuToDB_Click" Background="#b2fcff" BorderThickness="0.5"  >
                            <!--<Button.Resources>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="CornerRadius" Value="2"/>
                                </Style>
                            </Button.Resources>-->
                        </Button>
                    </StackPanel>


                    <DataGrid x:Name ="MultiShot" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="2" AlternatingRowBackground="LightGreen"
                              CanUserAddRows="True" CanUserDeleteRows="True" AutoGenerateColumns="False" RowHeight="20"
                              EnableRowVirtualization="True"
                              ItemsSource="{Binding Source={StaticResource myCollectionView}}"
                              SelectedItem="{Binding mSelectedRowOnDataGrid, UpdateSourceTrigger=PropertyChanged}">
                        <DataGrid.ColumnHeaderStyle>
                            <Style TargetType="{x:Type DataGridColumnHeader}">
                                <Setter Property="FontWeight" Value="DemiBold"/>
                                <Setter Property="VerticalAlignment" Value="Center"/>
                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                            </Style>
                        </DataGrid.ColumnHeaderStyle>

                        <DataGrid.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Delete Item"  Click="MenuItemDel_Click">
                                    <MenuItem.Icon>
                                        <Image Source="/Images/icons8-delete-file-48.png" />
                                    </MenuItem.Icon>
                                </MenuItem>
                                <MenuItem Header="Add Item"  Click="MenuItemAdd_Click" >
                                    <MenuItem.Icon>
                                        <Image Source="/Images/icons8-add-file-48.png" />
                                    </MenuItem.Icon>
                                </MenuItem>
                            </ContextMenu>
                        </DataGrid.ContextMenu>

                        <DataGrid.Columns>
                            <DataGridTextColumn Header="Remark" Width="100"  Binding="{Binding mRemark, Mode=TwoWay}"/>
                            <DataGridTemplateColumn Header="WaveForm" Width="100" CanUserSort="True" SortMemberPath="mWave">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding mWave, UpdateSourceTrigger=PropertyChanged}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                                <DataGridTemplateColumn.CellEditingTemplate>
                                    <DataTemplate>
                                        <ComboBox ItemsSource="{Binding Source={StaticResource dataFromEnum}}" 
                                                  SelectedItem="{Binding mWave, Mode=TwoWay, Source={StaticResource myCollectionView}}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellEditingTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTextColumn Width="130" Header="Frequency(Hz)" Binding="{Binding mFreq}"/>
                            <DataGridTextColumn Width="85" Header="Ampl(V)"  Binding="{Binding mAmpl}"/>
                            <!--<DataGridTextColumn Header="Sample Rate"  Binding="{Binding Path=mRate}"/>
                            <DataGridTextColumn Header="Duration(s)" Binding="{Binding Path=mDuration}"/>-->

                            <DataGridTemplateColumn Header="Target Column on DB" Width="265">
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock Text="{Binding mTargetOnDB}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                                <DataGridTemplateColumn.CellEditingTemplate>
                                    <DataTemplate>
                                        <ComboBox ItemsSource="{Binding Source={StaticResource myCollectionDBView}}" 
                                                  SelectedItem="{Binding mTargetOnDB}" />
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellEditingTemplate>
                            </DataGridTemplateColumn>
                            <DataGridCheckBoxColumn Header="Send?" Width="60" Binding="{Binding mSendToDB}"/>
                        </DataGrid.Columns>

                    </DataGrid>
                </Grid>
            </TabItem>

            <TabItem Header="Setting" DataContext="{Binding mSettingTab}" Height="20" Width="150">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200"/>
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="150"/>
                        <ColumnDefinition Width="200"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="50"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>

                        <RowDefinition Height="*"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="60"/>
                        <RowDefinition Height="20"/>
                    </Grid.RowDefinitions>

                    <TextBlock Text="DATABASE CONNECTION SETTING" Grid.Column="2" Grid.ColumnSpan="2"
                               VerticalAlignment="Bottom" Margin="1,0,10,4" HorizontalAlignment="Center"
                               FontSize="15" FontWeight="SemiBold"/>
                    <Label Content="Server(/Server IP)" Grid.Column="1" Grid.Row="1" FontWeight="DemiBold" 
                           HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,2"/>

                    <Label Content="User ID" Grid.Column="1" Grid.Row="2" FontWeight="DemiBold" 
                           HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,2"/>
                    <Label Content="Password" Grid.Column="1" Grid.Row="3" FontWeight="DemiBold" 
                           HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,2"/>
                    <Label Content="Database Name" Grid.Column="1" Grid.Row="4" FontWeight="DemiBold" 
                           HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,2"/>
                    <Label Content="Table Name" Grid.Column="1" Grid.Row="5" FontWeight="DemiBold" 
                           HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,2"/>

                    <StackPanel Orientation="Horizontal" Grid.Column="3" Grid.Row="1"  >
                        <Label Content="Port" FontWeight="DemiBold"  VerticalAlignment="Center" HorizontalAlignment="Right" Margin="10,0,5,0" />
                        <TextBox x:Name="txtPort" Text="{Binding mPort, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" MinWidth="87" MinHeight="20"  Margin="5" IsEnabled="{Binding mElementEnable}" Padding="2"/>

                    </StackPanel>

                    <TextBox x:Name="txtServer" Grid.Column="2" Grid.Row="1" Text="{Binding mServer, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                             Margin="5,5,5,5" IsEnabled="{Binding mElementEnable}" Padding="2"  MinHeight="20" />

                    <TextBox x:Name="txtUser" Text="{Binding mUserId, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="2" Grid.Row="2" TextWrapping="Wrap" 
                             MinHeight="20" Margin="5" MinWidth="200" IsEnabled="{Binding mElementEnable}" Padding="2" Grid.ColumnSpan="2"/>
                    <!--<PasswordBox x:Name="txtPass" Password="cannotbinding" Grid.Column="2" Grid.Row="3" 
                             MinHeight="20" Margin="5" MinWidth="200" IsEnabled="True" Padding="2" Grid.ColumnSpan="2"/>-->
                    <PasswordBox x:Name ="txtPass" w:PasswordHelper.Attach ="True" w:PasswordHelper.Password="{Binding mPassword, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Grid.Column="2" Grid.Row="3" 
                             MinHeight="20" Margin="5" MinWidth="200" IsEnabled="{Binding mElementEnable}" Padding="2" Grid.ColumnSpan="2"/>
                    <TextBox x:Name="txtDbName" Text="{Binding mDatabaseName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="2" Grid.Row="4" TextWrapping="Wrap" 
                             MinHeight="20" Margin="5" MinWidth="200" IsEnabled="{Binding mElementEnable}" Padding="2" Grid.ColumnSpan="2"/>
                    <TextBox x:Name="txtTabName" Text="{Binding mTabName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="2" Grid.Row="5" TextWrapping="Wrap" 
                             MinHeight="20" Margin="5" MinWidth="200" IsEnabled="{Binding mElementEnable}" Padding="2" Grid.ColumnSpan="2"/>

                    <Image x:Name="resultImg" Width ="25" Grid.Column="2" Grid.Row="6" HorizontalAlignment="Right" Margin="0,0,5,0">
                        <Image.Source>
                            <Binding Path="mUriImage" UpdateSourceTrigger="PropertyChanged">
                                <Binding.TargetNullValue>
                                    <BitmapImage>pack://application:,,,/WpfApp2;component/Images/placeholder.png</BitmapImage>
                                </Binding.TargetNullValue>
                            </Binding>
                        </Image.Source>
                    </Image>
                    <Button x:Name="btnTestConn" ToolTip="Test the connection of inserted setting with database" Content="Test Connection" Grid.Column="3" Grid.Row="6" IsEnabled="{Binding mElementEnable}" Background="#fae0df"
                            Style="{StaticResource myButtonStyle}" FontWeight="SemiBold"  Margin="0,4,5,4" BorderThickness="0.5" Click="btnTestConn_Click" />

                    <TextBlock Text ="{Binding mErrorServer, UpdateSourceTrigger=PropertyChanged}" Grid.Column="0" Grid.Row="7" 
                           Foreground="Red" FontStyle="Italic" Grid.ColumnSpan="5" TextWrapping="Wrap" HorizontalAlignment="Center" 
                           VerticalAlignment="Top" Margin="50,0,50,0"/>


                    <TextBlock Text="LOCAL SAVING FILE SETTING" Grid.Column="2" Grid.Row="7" Grid.ColumnSpan="2" 
                               VerticalAlignment="Bottom" Margin="21,0,30,4" HorizontalAlignment="Center"
                               FontSize="15" FontWeight="SemiBold" />
                    <Label Content="Json File Format" Grid.Column="1" Grid.Row="8" FontWeight="DemiBold" 
                           HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,3"/>
                    <ComboBox x:Name="cbbFormat" ToolTip="Choose the format of json file" Grid.Column="2" Grid.Row="8" IsEnabled="{Binding mElementEnable}" Width="150" HorizontalAlignment="Left" Margin="5,4,0,4">
                        <ComboBoxItem Content="Beautiful Format" IsSelected="{Binding mBeautifulJson, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <ComboBoxItem Content="Compact Format" />
                    </ComboBox>


                    <TextBlock x:Name ="txtCombobox" Text="Pls choose Targets on DB" Grid.Column="4" Grid.Row="0" VerticalAlignment="Bottom" Margin="15,0,0,0"
                               Visibility="{Binding mConnectionTest, Converter={StaticResource MyBoolToVis}}"/>

                    <ComboBox x:Name="cbbTargetList" Grid.Column="4" Grid.Row="1" Width="170" Margin="12,4,12,4" IsEnabled="{Binding mElementEnable}">
                        <ComboBox.Style>
                            <Style TargetType="{x:Type ComboBox}">
                                <Setter Property="Visibility" Value="Hidden" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding mConnectionTest}" Value="True">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ComboBox.Style>

                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <CheckBox Margin ="0,0,5,0" IsChecked="{Binding mIsSelected}"/>
                                    <TextBlock Text="{Binding mColumnName}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>


                    <TextBlock x:Name ="txtRate" Text="Record to DB per second" Grid.Column="4" Grid.Row="2" VerticalAlignment="Bottom" Margin="15,0,0,0"
                               Visibility="{Binding mConnectionTest, Converter={StaticResource MyBoolToVis}}"/>

                    <TextBox x:Name="txtSampleRate" Text="{Binding mRate, Delay=500, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="4" Grid.Row="3" TextWrapping="Wrap" 
                             Margin="15,5,15,5"  IsEnabled="{Binding mElementEnable}" Visibility="{Binding mConnectionTest, Converter={StaticResource MyBoolToVis}}" Padding="2" Grid.ColumnSpan="2"/>



                    <Button x:Name="btnEnableEdit" ToolTip="Enable/Disable the connection setting to database" Content="Enable Edit" Grid.Column="4" Grid.Row="9"
                            Style="{StaticResource myButtonStyle}" FontWeight="SemiBold" Width="170"
                            HorizontalAlignment="Center"  Margin="12,4,12,4" BorderThickness="0.5" Click="btnEnableEdit_Click"/>

                    <Button x:Name="btnCancel" Content="Cancel" Grid.Column="4" Grid.Row="10" IsEnabled="{Binding mElementEnable}" 
                            Style="{StaticResource myButtonStyle}" FontWeight="SemiBold" Width="170"
                            HorizontalAlignment="Center" Margin="12,4,12,4" BorderThickness="0.5" Click="btnCancel_Click"/>

                    <Button x:Name="btnSave" ToolTip="Save setting for next time" Content="Save Setting" Grid.Column="4" Grid.Row="12" IsEnabled="{Binding mElementEnable}" 
                            Style="{StaticResource myButtonStyle}" FontWeight="SemiBold" Width="170" Height="22" Background="#b2fcff"
                            HorizontalAlignment="Center"  Margin="12,0,12,0" BorderThickness="0.5" Click="btnSave_Click"/>

                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>